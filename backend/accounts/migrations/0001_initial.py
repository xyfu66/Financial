# Generated by Django 4.2.7 on 2025-08-05 04:56

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('id', models.UUIDField(db_column='user_id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('role', models.CharField(choices=[('super_admin', 'Super Admin'), ('admin', 'Admin'), ('user', 'User')], default='user', help_text='User role in the system', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active.', verbose_name='active')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_users', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'T_User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserDetailHistory',
            fields=[
                ('id', models.UUIDField(db_column='history_id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('detail_id', models.UUIDField()),
                ('user_id', models.UUIDField()),
                ('first_name', models.CharField(blank=True, max_length=100)),
                ('last_name', models.CharField(blank=True, max_length=100)),
                ('first_name_kana', models.CharField(blank=True, max_length=100)),
                ('last_name_kana', models.CharField(blank=True, max_length=100)),
                ('addr', models.TextField(blank=True)),
                ('room_name', models.CharField(blank=True, max_length=200)),
                ('sex', models.CharField(blank=True, max_length=10, null=True)),
                ('birth_day', models.DateField(blank=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('is_disabled', models.BooleanField()),
                ('is_widow', models.BooleanField()),
                ('is_household_head', models.BooleanField()),
                ('occupation', models.CharField(blank=True, max_length=200)),
                ('occupation_category', models.CharField(blank=True, max_length=100)),
                ('primary_income_source', models.CharField(blank=True, max_length=200)),
                ('tax_number', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('created_by', models.UUIDField(blank=True, null=True)),
                ('updated_by', models.UUIDField(blank=True, null=True)),
                ('history_created_at', models.DateTimeField(auto_now_add=True)),
                ('history_action', models.CharField(max_length=10)),
            ],
            options={
                'verbose_name': 'User Detail History',
                'verbose_name_plural': 'User Detail History',
                'db_table': 'T_User_Detail_History',
            },
        ),
        migrations.CreateModel(
            name='UserHistory',
            fields=[
                ('id', models.UUIDField(db_column='history_id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_id', models.UUIDField()),
                ('username', models.CharField(max_length=150)),
                ('email', models.EmailField(max_length=254)),
                ('password_hash', models.CharField(db_column='password_hash', max_length=128)),
                ('role', models.CharField(max_length=20)),
                ('is_active', models.BooleanField()),
                ('is_staff', models.BooleanField()),
                ('is_superuser', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('created_by', models.UUIDField(blank=True, null=True)),
                ('updated_by', models.UUIDField(blank=True, null=True)),
                ('history_created_at', models.DateTimeField(auto_now_add=True)),
                ('history_action', models.CharField(max_length=10)),
            ],
            options={
                'verbose_name': 'User History',
                'verbose_name_plural': 'User History',
                'db_table': 'T_User_History',
            },
        ),
        migrations.CreateModel(
            name='UserRoleModel',
            fields=[
                ('id', models.UUIDField(db_column='role_id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role_name', models.CharField(max_length=50, unique=True, verbose_name='role name')),
                ('role_description', models.TextField(blank=True, verbose_name='role description')),
                ('permissions', models.JSONField(blank=True, default=dict, verbose_name='permissions')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_roles', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_roles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Role',
                'verbose_name_plural': 'User Roles',
                'db_table': 'T_User_Role',
            },
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('id', models.UUIDField(db_column='permission_id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('permission_name', models.CharField(max_length=100, unique=True, verbose_name='permission name')),
                ('permission_description', models.TextField(blank=True, verbose_name='permission description')),
                ('resource', models.CharField(max_length=100, verbose_name='resource')),
                ('action', models.CharField(max_length=50, verbose_name='action')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_permissions', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_permissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Permission',
                'verbose_name_plural': 'User Permissions',
                'db_table': 'T_User_Permission',
                'unique_together': {('resource', 'action')},
            },
        ),
        migrations.CreateModel(
            name='UserDetail',
            fields=[
                ('id', models.UUIDField(db_column='detail_id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=100, verbose_name='last name')),
                ('first_name_kana', models.CharField(blank=True, max_length=100, verbose_name='first name (kana)')),
                ('last_name_kana', models.CharField(blank=True, max_length=100, verbose_name='last name (kana)')),
                ('addr', models.TextField(blank=True, verbose_name='address')),
                ('room_name', models.CharField(blank=True, max_length=200, verbose_name='room/building name')),
                ('sex', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True, verbose_name='gender')),
                ('birth_day', models.DateField(blank=True, null=True, verbose_name='birth date')),
                ('phone_number', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Enter a valid phone number.', regex='^[\\d\\-\\+\\(\\)\\s]+$')], verbose_name='phone number')),
                ('is_disabled', models.BooleanField(default=False, verbose_name='is disabled')),
                ('is_widow', models.BooleanField(default=False, verbose_name='is widow')),
                ('is_household_head', models.BooleanField(default=False, verbose_name='is household head')),
                ('occupation', models.CharField(blank=True, max_length=200, verbose_name='occupation')),
                ('occupation_category', models.CharField(blank=True, max_length=100, verbose_name='occupation category')),
                ('primary_income_source', models.CharField(blank=True, max_length=200, verbose_name='primary income source')),
                ('tax_number', models.CharField(blank=True, help_text='My Number (encrypted)', max_length=50, verbose_name='tax number (encrypted)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_user_details', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_user_details', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='detail', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Detail',
                'verbose_name_plural': 'User Details',
                'db_table': 'T_User_Detail',
                'indexes': [models.Index(fields=['user'], name='T_User_Deta_user_id_550952_idx'), models.Index(fields=['last_name', 'first_name'], name='T_User_Deta_last_na_7dc366_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='T_User_usernam_db0a4b_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='T_User_email_12e2d6_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='T_User_role_b36309_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active'], name='T_User_is_acti_8b287c_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='T_User_created_e0edd1_idx'),
        ),
    ]
