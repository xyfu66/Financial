# Generated by Django 4.2.7 on 2025-08-05 04:56

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='IncomeCategory',
            fields=[
                ('id', models.UUIDField(db_column='category_id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('category_code', models.CharField(max_length=20, unique=True, verbose_name='category code')),
                ('category_name', models.CharField(max_length=100, verbose_name='category name')),
                ('category_name_en', models.CharField(blank=True, max_length=100, verbose_name='category name (English)')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('tax_deductible', models.BooleanField(default=False, verbose_name='tax deductible')),
                ('is_business_income', models.BooleanField(default=True, verbose_name='is business income')),
                ('sort_order', models.IntegerField(default=0, verbose_name='sort order')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_income_categories', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_income_categories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Income Category',
                'verbose_name_plural': 'Income Categories',
                'db_table': 'T_Master_Income_Categories',
                'ordering': ['sort_order', 'category_name'],
            },
        ),
        migrations.CreateModel(
            name='Income',
            fields=[
                ('id', models.UUIDField(db_column='income_id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('income_date', models.DateField(verbose_name='income date')),
                ('description', models.TextField(verbose_name='description')),
                ('client_name', models.CharField(blank=True, max_length=200, verbose_name='client name')),
                ('client_address', models.TextField(blank=True, verbose_name='client address')),
                ('invoice_number', models.CharField(blank=True, max_length=100, verbose_name='invoice number')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='amount')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='tax amount')),
                ('currency', models.CharField(default='JPY', max_length=3, verbose_name='currency')),
                ('payment_method', models.CharField(blank=True, help_text='Cash, Bank Transfer, Credit Card, etc.', max_length=50, verbose_name='payment method')),
                ('payment_date', models.DateField(blank=True, null=True, verbose_name='payment date')),
                ('is_paid', models.BooleanField(default=False, verbose_name='is paid')),
                ('receipt_file_path', models.CharField(blank=True, max_length=500, verbose_name='receipt file path')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('ocr_processed', models.BooleanField(default=False, verbose_name='OCR processed')),
                ('ocr_confidence', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='OCR confidence')),
                ('ocr_data', models.JSONField(blank=True, default=dict, verbose_name='OCR data')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=500, verbose_name='tags')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(db_column='category_id', on_delete=django.db.models.deletion.PROTECT, related_name='incomes', to='financial.incomecategory')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_incomes', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_incomes', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='incomes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Income',
                'verbose_name_plural': 'Incomes',
                'db_table': 'T_Dat_Incomes',
                'ordering': ['-income_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FileUpload',
            fields=[
                ('id', models.UUIDField(db_column='upload_id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('original_filename', models.CharField(max_length=255, verbose_name='original filename')),
                ('stored_filename', models.CharField(max_length=255, verbose_name='stored filename')),
                ('file_path', models.CharField(max_length=500, verbose_name='file path')),
                ('file_size', models.BigIntegerField(verbose_name='file size')),
                ('file_type', models.CharField(max_length=100, verbose_name='file type')),
                ('mime_type', models.CharField(blank=True, max_length=100, verbose_name='MIME type')),
                ('upload_type', models.CharField(choices=[('income_receipt', 'Income Receipt'), ('expense_receipt', 'Expense Receipt'), ('document', 'Document'), ('tax_document', 'Tax Document'), ('other', 'Other')], default='document', max_length=50, verbose_name='upload type')),
                ('related_record_id', models.UUIDField(blank=True, help_text='Can reference income_id, expense_id, etc.', null=True, verbose_name='related record ID')),
                ('related_table', models.CharField(blank=True, help_text='Table name of related record', max_length=100, verbose_name='related table')),
                ('ocr_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20, verbose_name='OCR status')),
                ('ocr_result', models.JSONField(blank=True, default=dict, verbose_name='OCR result')),
                ('is_processed', models.BooleanField(default=False, verbose_name='is processed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_file_uploads', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_file_uploads', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='file_uploads', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'File Upload',
                'verbose_name_plural': 'File Uploads',
                'db_table': 'T_Dat_File_Uploads',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExpenseCategory',
            fields=[
                ('id', models.UUIDField(db_column='category_id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('category_code', models.CharField(max_length=20, unique=True, verbose_name='category code')),
                ('category_name', models.CharField(max_length=100, verbose_name='category name')),
                ('category_name_en', models.CharField(blank=True, max_length=100, verbose_name='category name (English)')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('tax_deductible', models.BooleanField(default=True, verbose_name='tax deductible')),
                ('is_business_expense', models.BooleanField(default=True, verbose_name='is business expense')),
                ('depreciation_years', models.IntegerField(blank=True, help_text='Number of years for depreciation calculation', null=True, verbose_name='depreciation years')),
                ('sort_order', models.IntegerField(default=0, verbose_name='sort order')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_expense_categories', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_expense_categories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Expense Category',
                'verbose_name_plural': 'Expense Categories',
                'db_table': 'T_Master_Expense_Categories',
                'ordering': ['sort_order', 'category_name'],
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.UUIDField(db_column='expense_id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('expense_date', models.DateField(verbose_name='expense date')),
                ('description', models.TextField(verbose_name='description')),
                ('vendor_name', models.CharField(blank=True, max_length=200, verbose_name='vendor name')),
                ('vendor_address', models.TextField(blank=True, verbose_name='vendor address')),
                ('receipt_number', models.CharField(blank=True, max_length=100, verbose_name='receipt number')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='amount')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='tax amount')),
                ('currency', models.CharField(default='JPY', max_length=3, verbose_name='currency')),
                ('payment_method', models.CharField(blank=True, help_text='Cash, Bank Transfer, Credit Card, etc.', max_length=50, verbose_name='payment method')),
                ('payment_date', models.DateField(blank=True, null=True, verbose_name='payment date')),
                ('is_paid', models.BooleanField(default=False, verbose_name='is paid')),
                ('receipt_file_path', models.CharField(blank=True, max_length=500, verbose_name='receipt file path')),
                ('business_use_percentage', models.DecimalField(decimal_places=2, default=Decimal('100.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='business use percentage')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('ocr_processed', models.BooleanField(default=False, verbose_name='OCR processed')),
                ('ocr_confidence', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))], verbose_name='OCR confidence')),
                ('ocr_data', models.JSONField(blank=True, default=dict, verbose_name='OCR data')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=500, verbose_name='tags')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(db_column='category_id', on_delete=django.db.models.deletion.PROTECT, related_name='expenses', to='financial.expensecategory')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_expenses', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_expenses', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='expenses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Expense',
                'verbose_name_plural': 'Expenses',
                'db_table': 'T_Dat_Expenses',
                'ordering': ['-expense_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.UUIDField(db_column='asset_id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('asset_name', models.CharField(max_length=200, verbose_name='asset name')),
                ('asset_category', models.CharField(blank=True, max_length=100, verbose_name='asset category')),
                ('purchase_date', models.DateField(verbose_name='purchase date')),
                ('purchase_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='purchase amount')),
                ('depreciation_method', models.CharField(choices=[('straight_line', 'Straight Line'), ('declining_balance', 'Declining Balance')], default='straight_line', max_length=50, verbose_name='depreciation method')),
                ('useful_life_years', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='useful life years')),
                ('salvage_value', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='salvage value')),
                ('accumulated_depreciation', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15, verbose_name='accumulated depreciation')),
                ('disposal_date', models.DateField(blank=True, null=True, verbose_name='disposal date')),
                ('disposal_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True, verbose_name='disposal amount')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_assets', to=settings.AUTH_USER_MODEL)),
                ('expense', models.ForeignKey(blank=True, db_column='expense_id', help_text='Link to original purchase expense', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assets', to='financial.expense')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_assets', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='assets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Asset',
                'verbose_name_plural': 'Assets',
                'db_table': 'T_Dat_Assets',
                'ordering': ['-purchase_date', 'asset_name'],
            },
        ),
        migrations.CreateModel(
            name='TaxCalculation',
            fields=[
                ('id', models.UUIDField(db_column='calculation_id', default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('calculation_year', models.IntegerField(verbose_name='calculation year')),
                ('calculation_period_start', models.DateField(verbose_name='calculation period start')),
                ('calculation_period_end', models.DateField(verbose_name='calculation period end')),
                ('total_income', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15, verbose_name='total income')),
                ('total_expenses', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15, verbose_name='total expenses')),
                ('total_deductible_expenses', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15, verbose_name='total deductible expenses')),
                ('basic_deduction', models.DecimalField(decimal_places=2, default=Decimal('480000'), max_digits=15, verbose_name='basic deduction')),
                ('blue_form_deduction', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15, verbose_name='blue form deduction')),
                ('other_deductions', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15, verbose_name='other deductions')),
                ('income_tax', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15, verbose_name='income tax')),
                ('resident_tax', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15, verbose_name='resident tax')),
                ('business_tax', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=15, verbose_name='business tax')),
                ('calculation_notes', models.TextField(blank=True, verbose_name='calculation notes')),
                ('is_final', models.BooleanField(default=False, verbose_name='is final')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_tax_calculations', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_tax_calculations', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='tax_calculations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tax Calculation',
                'verbose_name_plural': 'Tax Calculations',
                'db_table': 'T_Dat_Tax_Calculations',
                'ordering': ['-calculation_year', '-created_at'],
                'indexes': [models.Index(fields=['user'], name='T_Dat_Tax_C_user_id_6878a5_idx'), models.Index(fields=['calculation_year'], name='T_Dat_Tax_C_calcula_cacc13_idx'), models.Index(fields=['calculation_period_start', 'calculation_period_end'], name='T_Dat_Tax_C_calcula_3be1a5_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='incomecategory',
            index=models.Index(fields=['is_active'], name='T_Master_In_is_acti_f15c6a_idx'),
        ),
        migrations.AddIndex(
            model_name='incomecategory',
            index=models.Index(fields=['category_code'], name='T_Master_In_categor_22edc6_idx'),
        ),
        migrations.AddIndex(
            model_name='income',
            index=models.Index(fields=['user'], name='T_Dat_Incom_user_id_474185_idx'),
        ),
        migrations.AddIndex(
            model_name='income',
            index=models.Index(fields=['category'], name='T_Dat_Incom_categor_65d708_idx'),
        ),
        migrations.AddIndex(
            model_name='income',
            index=models.Index(fields=['income_date'], name='T_Dat_Incom_income__f0ee5a_idx'),
        ),
        migrations.AddIndex(
            model_name='income',
            index=models.Index(fields=['amount'], name='T_Dat_Incom_amount_4ad720_idx'),
        ),
        migrations.AddIndex(
            model_name='income',
            index=models.Index(fields=['is_paid'], name='T_Dat_Incom_is_paid_7111e3_idx'),
        ),
        migrations.AddIndex(
            model_name='income',
            index=models.Index(fields=['created_at'], name='T_Dat_Incom_created_96564f_idx'),
        ),
        migrations.AddIndex(
            model_name='income',
            index=models.Index(fields=['user', 'income_date'], name='T_Dat_Incom_user_id_e51e5f_idx'),
        ),
        migrations.AddIndex(
            model_name='fileupload',
            index=models.Index(fields=['user'], name='T_Dat_File__user_id_6382fd_idx'),
        ),
        migrations.AddIndex(
            model_name='fileupload',
            index=models.Index(fields=['upload_type'], name='T_Dat_File__upload__de54ce_idx'),
        ),
        migrations.AddIndex(
            model_name='fileupload',
            index=models.Index(fields=['related_table', 'related_record_id'], name='T_Dat_File__related_9cfb58_idx'),
        ),
        migrations.AddIndex(
            model_name='fileupload',
            index=models.Index(fields=['ocr_status'], name='T_Dat_File__ocr_sta_eac29f_idx'),
        ),
        migrations.AddIndex(
            model_name='expensecategory',
            index=models.Index(fields=['is_active'], name='T_Master_Ex_is_acti_4dbc17_idx'),
        ),
        migrations.AddIndex(
            model_name='expensecategory',
            index=models.Index(fields=['category_code'], name='T_Master_Ex_categor_970c67_idx'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['user'], name='T_Dat_Expen_user_id_339409_idx'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['category'], name='T_Dat_Expen_categor_b5c2d2_idx'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['expense_date'], name='T_Dat_Expen_expense_d86469_idx'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['amount'], name='T_Dat_Expen_amount_82ec70_idx'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['is_paid'], name='T_Dat_Expen_is_paid_6c9fcf_idx'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['created_at'], name='T_Dat_Expen_created_21fac0_idx'),
        ),
        migrations.AddIndex(
            model_name='expense',
            index=models.Index(fields=['user', 'expense_date'], name='T_Dat_Expen_user_id_40373a_idx'),
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['user'], name='T_Dat_Asset_user_id_973f4d_idx'),
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['purchase_date'], name='T_Dat_Asset_purchas_dc100d_idx'),
        ),
        migrations.AddIndex(
            model_name='asset',
            index=models.Index(fields=['is_active'], name='T_Dat_Asset_is_acti_eb8fba_idx'),
        ),
    ]
